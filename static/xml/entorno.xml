<comandos>
    <comando nombre="Variables de entorno">
        <funcion nombre='param'>echo $HOME </funcion> 
        <funcion>Muestra la variable de entorno HOME que nos dice el directorio home de nuestro usuario.</funcion> 
        <funcion nombre='line'></funcion> 
        <funcion nombre='param'>echo $USER </funcion> 
        <funcion>Muestra la variable de entorno USER que nos dice el nombre de nuestro usuario, tambien podemos ejecutar el comando "whoami".</funcion> 
        <funcion nombre='line'></funcion> 
        <funcion nombre='param'>echo $SHELL </funcion> 
        <funcion>Tipo de shell que estamos usando, podemos ver las shells que tenemos instaladas en /etc/shells.</funcion> 
        <funcion nombre='line'></funcion> 
        <funcion nombre='param'>pwd </funcion> 
        <funcion>Nos indica la ruta actual del sistema en la que nos encontramos.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'>env</funcion> 
        <funcion>Muestra el entorno en el cual estamos trabajando</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> echo $PS1</funcion> 
        <funcion>Muestra el prompt de la shell actual.</funcion> 
        <!-- <funcion nombre="jump" height="10px"></funcion>         -->
        <funcion nombre="img">/static/content/prompt.png</funcion>
        <!-- <funcion nombre="jump" height="10px"></funcion>   -->
        <funcion nombre='line'></funcion>
        <funcion nombre='param'>echo $UID</funcion> 
        <funcion>El UID (User IDentifier) es un número único asignado a cada usuario en el sistema operativo Linux y se utiliza para identificar de forma única a los usuarios en el sistema.
        Si un usuario desea verificar si tiene permisos de administrador, puede utilizar la variable $UID para verificar si su UID es 0 (lo que significa que tiene permisos de superusuario).</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> echo $PATH </funcion> 
        <funcion>Lista de directorios en los cuales se buscara de izquierda a derecha en ellos comandos o binarios que ejecutemos en el terminal. Si ejecutamos un binario y este no se encuentra en una ruta 
        de nuestro PATH no se ejecutará.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> logname</funcion> 
        <funcion>Nombre con el que nos hemos logueado al sistema aunque luego cambiemos de usaurio.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !$ </funcion> 
        <funcion>Ejecuta el ultimo comando.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> ./ (directorio actual) </funcion> 
        <funcion>Si queremos ejecutar un binario o hacer algun tipo de referencia al directorio donde nos encontramos.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> ../ (directorio anterior) </funcion> 
        <funcion>Hace referencia a un directorio hacia atrás.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> ~/ o $HOME </funcion> 
        <funcion>Hace referencia al directorio home del usuario como el cual estamos conectados. Si somos root en /root y cualquier otro usuario en /home/nombre_de_usuario.
        Para movernos rapidamente al home podemos hacerlo de varias maneras:</funcion> 
        <funcion nombre='param'> cd, cd ~ o cd $HOME </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> / (raíz) </funcion> 
        <funcion>Dirctorio raiz, aqui encontraremos las principales rutas de nuestro sistema como bin, dev, tmp, opt, proc...</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> ../{file1,file2}  </funcion> 
        <funcion>Para manejar múltiples archivos podemos usar {,}</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $0</funcion> 
        <funcion>Cuando ejecutamos un script o un comando esto hace referencia a el nombre del propio comando o del script, a secas spawnearia una bash ya que hace referencia al interprete de comandos</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $1 </funcion> 
        <funcion>Primer parámetro o argumento pasado a un comando o script ejecutado</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $2 </funcion> 
        <funcion>Segundo parámetro o argumento pasado a un comando o script ejecutado y así sucesivamente con $3,$4,$5...</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $#  </funcion> 
        <funcion>Número total de parámetros dados a un comando o script.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $* </funcion> 
        <funcion>Almacena todo el set de parámetros como una sola cadena de texto</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $@ </funcion> 
        <funcion>Almacena todo el set de parámetros en una lista</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $? </funcion> 
        <funcion>Exit status del último comando, nos dice si el estado ha sido exitoso (0) error (1) o que tipo de error dependiendo del valor que devuelva </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $$ </funcion> 
        <funcion>PID o número de proceso de la shell actual </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> $! </funcion> 
        <funcion>PID o número de proceso del último trabajo en el background. </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !! </funcion> 
        <funcion>Ejecuta el último comando </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !1  </funcion> 
        <funcion>Ejecuta el primer comando del .bash_history.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !-1  </funcion> 
        <funcion>Ejecuta el último comando del .bash_history.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !n:p  </funcion> 
        <funcion>Muestra el ultimo comando sin ejecutarlo y lo añade al history.</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> chmod 777 !-3* </funcion> 
        <funcion>Asigna permisos 777 a los argumentos de el antepenultimo comando ejecutado </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> !!:s/status/start </funcion> 
        <funcion>Ejecuta el último comando pero sustituye cualquier "status" que encuentre por "start".</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> sodu mkdir demo </funcion> 
        <funcion nombre='param'> ^sodu^sudo  </funcion> 
        <funcion>Ejecuta el ultimo comando pero cambia la primera "sodu" por "sudo"</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> r </funcion> 
        <funcion>ejecuta el ultimo comando</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> echo $HISTSIZE </funcion> 
        <funcion>Define el número máximo de comandos que se almacenan en el historial </funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> export $HISTSIZE=1000 </funcion> 
        <funcion>Export sirve para modificar variables globales, en este caso de entorno, pero solo se aplicaria en la shell que tenemos abierta, si queremos que guarde para que sea así siempre 
        que abramos unas shell tenemos que añadirlo a nuestro archivo de configuracion .bashrc en nuestro directorio home</funcion> 
        <funcion nombre='line'></funcion>
        <funcion nombre='param'> Wildcards: ? y * </funcion> 
        <funcion>Podemos usar el ? como sustitución de un carácter y * como varios</funcion> 
        <funcion> /usr/b?n/d?r funcionaria ya que interpretaría los posibles matches y en este caso coincide con /usr/bin/dir que es como un ls</funcion> 
    </comando>
    <comando nombre="cat">
        <funcion>cat es un comando en el sistema operativo Linux que se utiliza para concatenar y mostrar el contenido de archivos en la terminal. Es decir, cat permite ver el contenido de un archivo en la línea de comandos. 
        Además de simplemente mostrar el contenido de un archivo, cat también puede utilizarse para concatenar varios archivos en un solo archivo de salida:</funcion>
        <funcion nombre="param">cat file1.txt file2.txt > combined.txt</funcion> 
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Agregar contenido a un archivo existente:</funcion>
        <funcion nombre="param">echo "new text" >> existing_file.txt</funcion> 
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Mostrar varios archivos a la vez: </funcion> 
        <funcion nombre="param">cat file1.txt file2.txt</funcion>  
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>En resumen, cat es un comando versátil y útil en Linux que permite realizar una variedad de tareas relacionadas con la gestión de archivos en la terminal.</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/cat.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Una herrmienta util que muestra de una manera mas colorida el output es bat, ademas podemos especificar el lenguaje con el parámetro -l, para instalarlo ejecutamos: </funcion> 
        <funcion nombre="param">apt install bat</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/bat.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
    </comando>
    <comando nombre="wc">
        <funcion>wc puede contar el contenido de un archivo, lineas caracteres, palabras...</funcion> 
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="param">cat file.txt | wc -l</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/wc1.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Parámetro -w sirve para contar palabras</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="param">cat file.txt | wc -l</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/wc2.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Parámetro -c sirve para contar caracteres</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="param">cat file.txt | wc -c</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/wc3.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
    </comando>
    <comando nombre="sort">
        <funcion>sort ordena alfabeticamente un archivo</funcion> 
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/sort1.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="param">sort file.txt | bat</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/sort2.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion>Con el parámetro -u podemos quitar las repeticiones de un archivo</funcion> 
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="param">sort file.txt | bat</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
        <funcion nombre="img">/static/content/sort3.png</funcion>
        <funcion nombre="jump" height="10px"></funcion> 
    </comando>

    <comando nombre="sed">
    </comando>

    <comando nombre="grep">
    </comando>

    <comando nombre="diff">
    </comando>

    <comando nombre="awk">
    </comando>

    <comando nombre="xxd">
    </comando>

    <comando nombre="base64">
    </comando>

    <comando nombre="head">
    </comando>

    
    <comando nombre="tail">
    </comando>
</comandos>
